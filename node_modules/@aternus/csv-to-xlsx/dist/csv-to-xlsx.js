#!/usr/bin/env node
"use strict";const path=require("path");const fs=require("fs");const program=require("commander");const convertCsvToXlsx=require("./convertCsvToXlsx");if(module===require.main){const pkg=require("../package.json");program.version(pkg.version,"-v, --version").option("-i, --input-dir [dir]","Input directory that has the CSV files","csv").option("-o, --output-dir [dir]","Output directory for the XLSX files","xlsx");program.on("--help",function(){console.log(``);console.log(`Created by: ${pkg.author.name}`);console.log(`Please report bugs at: ${pkg.bugs.url}`);console.log(`Version: ${pkg.version}`)});program.parse(process.argv);const programOptions=program.opts();const csvPath=path.join(process.cwd(),programOptions.inputDir);const xlsxPath=path.join(process.cwd(),programOptions.outputDir);if(!fs.existsSync(csvPath)){console.error(`Invalid input directory: ${csvPath}\n`);process.exitCode=1;program.help()}if(!fs.existsSync(xlsxPath)){console.info(`Creating output directory: ${xlsxPath}`);fs.mkdirSync(xlsxPath,{recursive:true})}const csvFiles=fs.readdirSync(csvPath);for(const file of csvFiles){const fileObject=path.parse(file);if(fileObject.ext!==".csv"){continue}console.info(`Converting: ${fileObject.name}`);try{convertCsvToXlsx(path.join(csvPath,file),path.join(xlsxPath,`${fileObject.name}.xlsx`))}catch(e){console.info(`${e.toString()}`)}}console.info(`Complete.`)}else{module.exports=convertCsvToXlsx}